# 문맥 자유 문법
-문맥 자유 문법을 이루는 4요소
V는 변수(Variables), 혹은 비단말(non-terminals)라고 한다.
T는 단말(terminal)의 집합이며, 앱실론 ε을 포함한다.
P는 생성(prodictions) 규칙의 집합이다.
S는 시작 변수(start variable)이다.
A -> a (A가 non-terminal, a가 terminal)
non-terminal은 terminal로 정의가됨(x = 10 과 같음) = (화살표 왼쪽의 것이 오른쪽의 것에 의해 생성이된다.)
화살표의 왼쪽에는 non-terminal과 terminal모두 올 수 있지만 오른쪽은 terminal만 올 수 있다.

## CFG에 속하는지 확인 하는 방법
1. 유도(derivation)
2. 재귀적추론(recursive inference)

## 형식언어 
-알파벳이란 공집합이 아닌 기호들의 유한 집합으로 시그마로 표시한다.
-알파벳의 의미는 일반적인 프로그래밍 언어에서 사용하는 문자,  기호의 집합이다.
-터미널 - 더 이상 정의가 필요없는 단어
-int 터미널 = 10;
-int x = 10;

## 정규언어 표현
문장 1;
1. 인식기: "문장 1"이 C언어의 설계된 문법에 소속 여부
2. 생성기: C언어 설계 문법으로부터 가능한 문장을 모두 생성



## Lexical analysis(어휘분석)
 - token (예: 수치는 token number 10번, 연산은 token number 5번 등)

## Syntax analysis(구문분석)
 - 문법 Check (예: I student a am (x) ) 
 - I stuent a am 를 트리를 만들어서 검사를 한다. 
  - 존재(o) - unique  검사를 했을 때, 트리의 형태가 unique 해야 통과
  - 존재(x) - X   실행을 할 때 마다 결과가 바뀌면 언어 설계가 잘못된 것임 (예: 2+3*2가 8도 나오고 10도 나오고 한다면 계산 우선순위가 없는거니까 언어 설계 오류)

## 
1. Symbol : 기본 언어 단위
2. Alphabet : Symbol들의 유한집합 A={a,b,c,d .... x,y,z}
3. String : abc, bag, note, book ...
4. Length : string 내부의 symbol 개수 (예: bag는 3, note는 4)
5. Concatenation : notebook
6. Empty string : 입실론 ε
7. W^n : w가 n개 연결된 string (예 : a^3 = aaa, a^5 = aaaaa
8. W^R : w의 reverse (예 : abc^R = cba)
9. T^* : 모든 string 집합 앱실론 ε도 포함
10. T^+ : T^* - {ε}
11. 언어(Language) : T^* 에 예속하는 특정 string

문법(Grammar) 언어를 표현하기 위한 방법
